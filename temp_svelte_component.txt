<script lang="ts">
  import { Calendar, Users, Clock, ArrowRight, Check } from 'lucide-svelte';
  import { formatCurrentPrice } from '$lib/currency/store';
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import T from '$lib/i18n/paraglide/T.svelte';

  // Props
  interface Props {
    roomTypeId?: string | null;
    propertyId?: string | null;
    suiteName: string;
  }

  let { roomTypeId, propertyId, suiteName }: Props = $props();

  // State
  let checkIn = $state('');
  let checkOut = $state('');
  let adults = $state(2);
  let children = $state(0);
  let loading = $state(false);
  let price = $state<number | null>(null);
  let availability = $state<'checking' | 'available' | 'limited' | 'unavailable' | null>(null);

  // Get minimum dates
  function getMinDate(): string {
    return new Date().toISOString().split('T')[0];
  }

  function getMinCheckoutDate(): string {
    if (!checkIn) return getMinDate();
    const checkInDate = new Date(checkIn);
    checkInDate.setDate(checkInDate.getDate() + 1);
    return checkInDate.toISOString().split('T')[0];
  }

  // Calculate nights
  function calculateNights(): number {
    if (!checkIn || !checkOut) return 0;
    const start = new Date(checkIn);
    const end = new Date(checkOut);
    const diffTime = end.getTime() - start.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  let nights = $derived(calculateNights());

  // Check availability when dates change
  $effect(() => {
    if (checkIn && checkOut && roomTypeId) {
      checkAvailability();
    }
  });

  async function checkAvailability() {
    if (!checkIn || !checkOut || !roomTypeId) return;
    
    loading = true;
    availability = 'checking';
    
    try {
      const params = new URLSearchParams({
        checkIn,
        checkOut,
        adults: adults.toString(),
        children: children.toString()
      });

      const response = await fetch(`/api/cloudbeds/availability?${params}`);
      const result = await response.json();

      if (result.success && result.data?.availability?.[0]?.propertyRooms) {
        const room = result.data.availability[0].propertyRooms.find(
          (r: any) => r.roomTypeID === roomTypeId
        );

        if (room) {
          price = room.roomRate;
          const available = room.roomsAvailable || 0;
          
          if (available === 0) {
            availability = 'unavailable';
          } else if (available <= 2) {
            availability = 'limited';
          } else {
            availability = 'available';
          }
        } else {
          availability = 'unavailable';
          price = null;
        }
      } else {
        availability = 'unavailable';
        price = null;
      }
    } catch (error) {
      console.error('Error checking availability:', error);
      availability = 'unavailable';
      price = null;
    } finally {
      loading = false;
    }
  }

  function handleBookNow() {
    const params = new URLSearchParams({
      checkIn,
      checkOut,
      adults: adults.toString(),
      children: children.toString(),
      roomType: suiteName.toLowerCase().replace(/\s+/g, '-')
    });

    goto(`/accommodation/reservations?${params}`);
  }

  // Set default dates (today + 1 and today + 2)
  onMount(() => {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    const dayAfter = new Date(today);
    dayAfter.setDate(today.getDate() + 2);

    checkIn = tomorrow.toISOString().split('T')[0];
    checkOut = dayAfter.toISOString().split('T')[0];
  });
</script>
