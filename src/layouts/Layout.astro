---
import ChatwootWidget from '../components/ChatwootWidget.astro';
import { Footer } from '../components/Footer.tsx';
import Navbar from '../components/Navbar.astro';
import { getHotelInfoByHotelId, getMediaUrl, getSocialProfilesByHotelId } from '../lib/directus.js';
import '../styles/global.css';
import { readFileSync } from 'node:fs';
import { join } from 'node:path';

export interface Props {
  title: string;
  description?: string;
  domain?: string;
  ga4Id?: string;
  pixelId?: string;
  hotel?: Record<string, unknown>; // Hotel data for automatic theme generation
  hotelSubdomain?: string; // For theme naming
  hotelDomain?: string; // Hotel domain for navbar links
  isSubdomain?: boolean; // For navbar URL generation
  // Legacy props for backward compatibility
  themeCSS?: string;
  themeName?: string;
  hotelName?: string;
  themeConfig?: Record<string, unknown>;
  hotelLogo?: Record<string, unknown> | null;
  showNavbar?: boolean;
}

const {
  title,
  description = 'Hotel website powered by Daotomata Stack',
  domain,
  ga4Id,
  pixelId,
  hotel,
  hotelSubdomain,
  hotelDomain,
  isSubdomain = false,
  // Legacy props for backward compatibility
  themeCSS: legacyThemeCSS,
  themeName: legacyThemeName,
  hotelName = 'Hotel',
  themeConfig: legacyThemeConfig = {},
  hotelLogo: legacyHotelLogo = null,
  showNavbar = true,
} = Astro.props;

// Static theme application for static pages
let themeName: string | undefined,
  _themeConfig: Record<string, unknown> | undefined,
  hotelLogo: Record<string, unknown> | null | undefined;

if (hotel && hotelSubdomain) {
  // Apply static theme name from Directus
  console.log('üé® Layout.astro - Applying static theme for:', hotelSubdomain);

  themeName = hotel.theme?.name || `${hotelSubdomain}-theme`;
  _themeConfig = hotel.theme || {};
  hotelLogo = hotel.logo || null;

  console.log('üé® Applied static theme:', {
    themeName,
    hotelLogoId: hotelLogo?.id,
  });
} else {
  // Use legacy props for backward compatibility
  console.log('üé® Layout.astro - Using legacy theme props');
  themeName = legacyThemeName;
  _themeConfig = legacyThemeConfig;
  hotelLogo = legacyHotelLogo;
}

// Generate dynamic favicon URLs from hotel logo
const _faviconUrl = hotelLogo?.id
  ? getMediaUrl(hotelLogo.id, { width: 32, height: 32, quality: 90, format: 'png' })
  : '/favicon.svg';
const _favicon16Url = hotelLogo?.id
  ? getMediaUrl(hotelLogo.id, { width: 16, height: 16, quality: 90, format: 'png' })
  : '/favicon.svg';
const _appleIconUrl = hotelLogo?.id
  ? getMediaUrl(hotelLogo.id, { width: 180, height: 180, quality: 90, format: 'png' })
  : '/favicon.svg';

// Load dynamic Google Fonts from generated configuration
let googleFontsURL =
  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'; // fallback
let hotelFonts = {
  primary: 'Inter',
  secondary: 'Playfair Display',
  mono: 'JetBrains Mono',
  detail: 'Inter',
  weights: {
    primary: '400',
    secondary: '400',
    mono: '400',
    detail: '400',
  },
};

try {
  const fontsConfigPath = join(process.cwd(), 'src/generated/fonts-config.json');
  const fontsConfig = JSON.parse(readFileSync(fontsConfigPath, 'utf8'));

  if (hotel?.name && fontsConfig.hotels[hotel.name]) {
    googleFontsURL = fontsConfig.hotels[hotel.name].googleFontsURL;
    hotelFonts = {
      ...fontsConfig.hotels[hotel.name].fonts,
      weights: fontsConfig.hotels[hotel.name].weights,
    };
    console.log(`üî§ Loading dynamic fonts for ${hotel.name}:`, googleFontsURL);
    console.log(`üî§ Font configuration:`, hotelFonts);
  } else {
    console.log('üî§ Using fallback fonts - hotel not found in fonts config');
  }
} catch (error) {
  console.warn('‚ö†Ô∏è Could not load fonts config, using fallback fonts:', error.message);
}

// Load social profiles and hotel info for the hotel
let socialProfiles = [];
let hotelInfo = null;
if (hotel?.id) {
  try {
    [socialProfiles, hotelInfo] = await Promise.all([
      getSocialProfilesByHotelId(hotel.id),
      getHotelInfoByHotelId(hotel.id),
    ]);
    console.log(`üì± Loaded ${socialProfiles.length} social profiles for hotel ${hotel.id}`);
    console.log(
      `üè® Loaded hotel info for hotel ${hotel.id}:`,
      hotelInfo?.location || 'No additional info'
    );
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not load social profiles or hotel info:', error.message);
  }
}
---

<!doctype html>
<html lang="en" data-theme={themeName}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Dynamic favicon based on hotel logo -->
    {hotelLogo && hotelLogo.id ? (
      <>
        <link rel="icon" type="image/png" sizes="32x32" href={_faviconUrl} />
        <link rel="icon" type="image/png" sizes="16x16" href={_favicon16Url} />
        <link rel="apple-touch-icon" sizes="180x180" href={_appleIconUrl} />
      </>
    ) : (
      <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    )}

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    

    
    <!-- No dynamic CSS needed - DaisyUI handles themes automatically via data-theme -->

    <!-- Dynamic Google Fonts loaded from generated configuration -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href={googleFontsURL}
      rel="stylesheet"
    />
    
    <!-- Google Analytics 4 -->
    {ga4Id && (
      <>
        <script async src={`https://www.googletagmanager.com/gtag/js?id=${ga4Id}`}></script>
        <script define:vars={{ ga4Id }}>
          window.dataLayer = window.dataLayer || [];
          function gtag(){window.dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', ga4Id);
        </script>
      </>
    )}
    
    <!-- Meta Pixel -->
    {pixelId && (
      <script define:vars={{ pixelId }}>
        /* eslint-disable @typescript-eslint/no-unused-expressions */
        !function(f,b,e,v,n,t,s)
        {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
        n.callMethod.apply(n,arguments):n.queue.push(arguments)};
        if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
        n.queue=[];t=b.createElement(e);t.async=!0;
        t.src=v;s=b.getElementsByTagName(e)[0];
        s.parentNode.insertBefore(t,s)}(window, document,'script',
        'https://connect.facebook.net/en_US/fbevents.js');
        /* eslint-enable @typescript-eslint/no-unused-expressions */
        window.fbq('init', pixelId);
        window.fbq('track', 'PageView');
      </script>
      <noscript>
        <img height="1" width="1" style="display:none" alt=""
             src={`https://www.facebook.com/tr?id=${pixelId}&ev=PageView&noscript=1`} />
      </noscript>
    )}
  </head>
  <body class="bg-base-100 min-h-screen">
    <!-- Navigation -->
    {showNavbar && (
      <Navbar
        hotelName={hotelName}
        hotelDomain={hotelDomain || domain || 'demo.localhost'}
        currentPath={Astro.url.pathname}
        themeConfig={_themeConfig}
        hotelLogo={hotelLogo}
        hotelInfo={hotelInfo}
        isSubdomain={isSubdomain}
      />
    )}

    <!-- Main Content -->
    <main class="main-content">
      <slot />
    </main>

    <!-- Footer -->
    {hotel && hotelSubdomain && (
      <Footer
        hotelName={hotelName}
        hotelSlug={hotelSubdomain}
        contactEmail={hotel.contact_email}
        contactPhoneCalls={hotel.contact_phone_calls}
        contactPhoneMessages={hotel.contact_phone_messages}
        location={hotel.location}
        socialProfiles={socialProfiles}
        hotelInfo={hotelInfo}
        client:load
      />
    )}

    <!-- Auto-inject Chatwoot Widget with automatic domain detection -->
    <ChatwootWidget />
  </body>
</html>

<style define:vars={{
  fontPrimary: `"${hotelFonts.primary}", sans-serif`,
  fontSecondary: `"${hotelFonts.secondary}", serif`,
  fontMono: `"${hotelFonts.mono}", monospace`,
  fontDetail: `"${hotelFonts.detail}", serif`,
  fontPrimaryWeight: hotelFonts.weights?.primary || '400',
  fontSecondaryWeight: hotelFonts.weights?.secondary || '400',
  fontMonoWeight: hotelFonts.weights?.mono || '400',
  fontDetailWeight: hotelFonts.weights?.detail || '400'
}}>
  :root {
    --font-primary: var(--fontPrimary);
    --font-secondary: var(--fontSecondary);
    --font-mono: var(--fontMono);
    --font-detail: var(--fontDetail);
    --font-primary-weight: var(--fontPrimaryWeight);
    --font-secondary-weight: var(--fontSecondaryWeight);
    --font-mono-weight: var(--fontMonoWeight);
    --font-detail-weight: var(--fontDetailWeight);
  }

  html {
    font-family: var(--font-primary);
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    font-family: var(--font-primary);
  }
</style>
