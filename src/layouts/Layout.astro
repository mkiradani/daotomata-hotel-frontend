---
import ChatwootWidget from '../components/ChatwootWidget.astro';
import { Footer } from '../components/Footer.tsx';
import Navbar from '../components/Navbar.astro';
import { getHotelInfoByHotelId, getMediaUrl, getSocialProfilesByHotelId } from '../lib/directus.js';
import '../styles/global.css';
import { readFileSync } from 'node:fs';
import { join } from 'node:path';

export interface Props {
  title: string;
  description?: string;
  hotel?: Record<string, unknown>; // Hotel data for theme generation
  hotelName?: string;
  showNavbar?: boolean;
}

const {
  title,
  description = 'Hotel website powered by Daotomata Stack',
  hotel,
  hotelName = 'Hotel',
  showNavbar = true,
} = Astro.props;

// Simplified theme application for single-tenant
const hotelData: any = hotel;
let themeName: string | undefined;
let hotelLogo: any = null;
let ga4Id: string | undefined;
let pixelId: string | undefined;

if (hotelData) {
  console.log('üé® Layout.astro - Applying theme for:', hotelData.name);

  const hotelSlug = hotelData.domain?.split('.')[0] || 'default';
  themeName = hotelData.theme?.name || `${hotelSlug}-theme`;
  hotelLogo = hotelData.logo || null;
  ga4Id = hotelData.ga4_token || undefined;
  pixelId = hotelData.meta_pixel_token || undefined;

  console.log('üé® Applied theme:', {
    themeName,
    hotelLogoId: hotelLogo?.id,
    ga4Id: ga4Id ? 'configured' : 'not configured',
    pixelId: pixelId ? 'configured' : 'not configured',
  });
} else {
  console.log('üé® Layout.astro - No hotel data, using default theme');
  themeName = 'default-theme';
}

// Generate dynamic favicon URLs from hotel logo
const _faviconUrl = hotelLogo?.id
  ? getMediaUrl(hotelLogo.id, { width: 32, height: 32, quality: 90, format: 'png' })
  : '/favicon.svg';
const _favicon16Url = hotelLogo?.id
  ? getMediaUrl(hotelLogo.id, { width: 16, height: 16, quality: 90, format: 'png' })
  : '/favicon.svg';
const _appleIconUrl = hotelLogo?.id
  ? getMediaUrl(hotelLogo.id, { width: 180, height: 180, quality: 90, format: 'png' })
  : '/favicon.svg';

// Load dynamic Google Fonts from generated configuration
let googleFontsURL =
  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'; // fallback
let hotelFonts = {
  primary: 'Inter',
  secondary: 'Playfair Display',
  mono: 'JetBrains Mono',
  detail: 'Inter',
  weights: {
    primary: '400',
    secondary: '400',
    mono: '400',
    detail: '400',
  },
};

try {
  const fontsConfigPath = join(process.cwd(), 'src/generated/fonts-config.json');
  const fontsConfig = JSON.parse(readFileSync(fontsConfigPath, 'utf8'));

  if (hotel?.name && fontsConfig.hotels[hotel.name]) {
    googleFontsURL = fontsConfig.hotels[hotel.name].googleFontsURL;
    hotelFonts = {
      ...fontsConfig.hotels[hotel.name].fonts,
      weights: fontsConfig.hotels[hotel.name].weights,
    };
  } else {
    // Using fallback fonts - hotel not found in fonts config
  }
} catch (error) {
  // Could not load fonts config, using fallback fonts
}

// Load social profiles and hotel info for the hotel
let socialProfiles = [];
let hotelInfo = null;
if (hotel?.id) {
  try {
    [socialProfiles, hotelInfo] = await Promise.all([
      getSocialProfilesByHotelId(hotel.id),
      getHotelInfoByHotelId(hotel.id),
    ]);
    console.log(`üì± Loaded ${socialProfiles.length} social profiles for hotel ${hotel.id}`);
    console.log(
      `üè® Loaded hotel info for hotel ${hotel.id}:`,
      hotelInfo?.location || 'No additional info'
    );
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not load social profiles or hotel info:', error.message);
  }
}
---

<!doctype html>
<html lang="en" data-theme={themeName}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light" />
    <meta name="theme-color" content="#ffffff" />

    <!-- IMMEDIATE THEME ENFORCEMENT -->
    <script define:vars={{ themeName }}>
      // Execute immediately before any other scripts
      document.documentElement.setAttribute('data-theme', themeName);
      document.documentElement.style.colorScheme = 'light';
      // Let CSS custom properties handle colors instead of hardcoding
    </script>

    <!-- Dynamic favicon based on hotel logo -->
    {hotelLogo && hotelLogo.id ? (
      <>
        <link rel="icon" type="image/png" sizes="32x32" href={_faviconUrl} />
        <link rel="icon" type="image/png" sizes="16x16" href={_favicon16Url} />
        <link rel="apple-touch-icon" sizes="180x180" href={_appleIconUrl} />
      </>
    ) : (
      <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    )}

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    

    
    <!-- No dynamic CSS needed - DaisyUI handles themes automatically via data-theme -->

    <!-- Force light theme and prevent dark mode activation -->
    <script is:inline define:vars={{ themeName }}>
      // Immediately force light theme
      console.log('üé® Forcing light theme:', themeName);

      // Set theme and color scheme immediately
      document.documentElement.setAttribute('data-theme', themeName);
      document.documentElement.style.colorScheme = 'light';
      // Let CSS custom properties handle colors instead of hardcoding

      // Override matchMedia to block dark mode detection
      if (typeof window !== 'undefined' && window.matchMedia) {
        const originalMatchMedia = window.matchMedia;
        window.matchMedia = function(query) {
          if (query.includes('prefers-color-scheme: dark')) {
            return { matches: false, media: query, onchange: null, addListener: function() {}, removeListener: function() {} };
          }
          return originalMatchMedia.call(this, query);
        };
      }

      // Continuously enforce light theme - more aggressive for Firefox
      setInterval(function() {
        const html = document.documentElement;
        const body = document.body;

        if (html.getAttribute('data-theme') !== themeName) {
          console.log('üé® Re-enforcing light theme');
          html.setAttribute('data-theme', themeName);
        }

        // Force light color scheme continuously
        html.style.colorScheme = 'light';
        if (body) {
          body.style.colorScheme = 'light';
        }

        // Firefox specific enforcement
        if (navigator.userAgent.includes('Firefox')) {
          html.style.background = 'var(--color-base-100, #ffffff)';
          html.style.color = 'var(--color-base-content, #1f2937)';
          if (body) {
            body.style.background = 'var(--color-base-100, #ffffff)';
            body.style.color = 'var(--color-base-content, #1f2937)';
          }
        }
      }, 100);
    </script>

    <!-- Minimal CSS to ensure light theme -->
    <style>
      /* Ensure light color scheme */
      :root, html, body {
        color-scheme: light !important;
      }

      /* Let DaisyUI handle all colors naturally */
      @media (prefers-color-scheme: dark) {
        :root, html, body {
          color-scheme: light !important;
        }
      }
    </style>

    <!-- Dynamic Google Fonts loaded from generated configuration -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href={googleFontsURL}
      rel="stylesheet"
    />
    
    <!-- Google Analytics 4 -->
    {ga4Id && (
      <>
        <script async src={`https://www.googletagmanager.com/gtag/js?id=${ga4Id}`}></script>
        <script define:vars={{ ga4Id }}>
          window.dataLayer = window.dataLayer || [];
          function gtag(){window.dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', ga4Id);
        </script>
      </>
    )}
    
    <!-- Meta Pixel -->
    {pixelId && (
      <script define:vars={{ pixelId }}>
        /* eslint-disable @typescript-eslint/no-unused-expressions */
        !function(f,b,e,v,n,t,s)
        {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
        n.callMethod.apply(n,arguments):n.queue.push(arguments)};
        if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
        n.queue=[];t=b.createElement(e);t.async=!0;
        t.src=v;s=b.getElementsByTagName(e)[0];
        s.parentNode.insertBefore(t,s)}(window, document,'script',
        'https://connect.facebook.net/en_US/fbevents.js');
        /* eslint-enable @typescript-eslint/no-unused-expressions */
        window.fbq('init', pixelId);
        window.fbq('track', 'PageView');
      </script>
      <noscript>
        <img height="1" width="1" style="display:none" alt=""
             src={`https://www.facebook.com/tr?id=${pixelId}&ev=PageView&noscript=1`} />
      </noscript>
    )}
  </head>
  <body class="bg-base-100 min-h-screen">
    <!-- Navigation -->
    {showNavbar && (
      <Navbar
        hotelName={hotelName}
        currentPath={Astro.url.pathname}
        hotelLogo={hotelLogo}
        hotelInfo={undefined}
      />
    )}

    <!-- Main Content -->
    <main class="main-content">
      <slot />
    </main>

    <!-- Footer -->
    {hotel && (
      <Footer
        hotelName={hotelName}
        hotelSlug={(hotel as any).domain?.split('.')[0] || 'default'}
        contactEmail={(hotel as any).contact_email || ''}
        contactPhoneCalls={(hotel as any).contact_phone_calls || ''}
        contactPhoneMessages={(hotel as any).contact_phone_messages || ''}
        location={(hotel as any).location}
        socialProfiles={[] as any[]}
        hotelInfo={undefined}
        client:load
      />
    )}

    <!-- Auto-inject Chatwoot Widget with automatic domain detection -->
    <!-- <ChatwootWidget /> -->
  </body>
</html>

<style define:vars={{
  fontPrimary: `"${hotelFonts.primary}", sans-serif`,
  fontSecondary: `"${hotelFonts.secondary}", serif`,
  fontMono: `"${hotelFonts.mono}", monospace`,
  fontDetail: `"${hotelFonts.detail}", serif`,
  fontPrimaryWeight: hotelFonts.weights?.primary || '400',
  fontSecondaryWeight: hotelFonts.weights?.secondary || '400',
  fontMonoWeight: hotelFonts.weights?.mono || '400',
  fontDetailWeight: hotelFonts.weights?.detail || '400'
}}>
  :root {
    --font-primary: var(--fontPrimary);
    --font-secondary: var(--fontSecondary);
    --font-mono: var(--fontMono);
    --font-detail: var(--fontDetail);
    --font-primary-weight: var(--fontPrimaryWeight);
    --font-secondary-weight: var(--fontSecondaryWeight);
    --font-mono-weight: var(--fontMonoWeight);
    --font-detail-weight: var(--fontDetailWeight);
  }

  html {
    font-family: var(--font-primary);
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    font-family: var(--font-primary);
  }
</style>
