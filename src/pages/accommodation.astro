---
import { RoomCard } from '../components/RoomCard.tsx';
import CollectionPageLayout from '../layouts/CollectionPageLayout.astro';
import {
  getHotelByDomain,
  getMediaUrl,
  getTranslatedContent,
} from '../lib/directus.js';
import {
  getHotelDomainFromRequest,
  debugHotelDetection,
  getSubdomainFromHostname,
  isSubdomainBasedRouting,
} from '../lib/domain-mapping.js';

// Enable SSR for hostname-based detection
export const prerender = false;

// Debug hotel detection
const detectionInfo = debugHotelDetection(Astro.url, Astro.params);
const hotelDomain = getHotelDomainFromRequest(Astro.url, Astro.params);

console.log(
  `🏨 Loading accommodation page for domain: ${hotelDomain}, hostname: ${Astro.url.hostname}`
);

// Load complete hotel data from Directus using detected domain
const hotelData = await getHotelByDomain(hotelDomain);

if (!hotelData) {
  console.error(`❌ Hotel not found: ${hotelDomain}`);
  return Astro.redirect('/404');
}

// Get current language (could be from URL params, cookies, etc.)
const currentLanguage = hotelData.default_language || 'en-US';

// Get translated content for the current language
const translatedContent = await getTranslatedContent(
  'accommodation',
  currentLanguage
);

// Build hotel object with translated content
const hotel = {
  // Basic hotel info
  id: hotelData.id,
  name: hotelData.name,
  domain: hotelData.domain,

  // Analytics and integrations
  analytics: {
    ga4_id: hotelData.ga4_token,
    pixel_id: hotelData.meta_pixel_token,
  },

  // Translated content
  content: {
    accommodation: {
      title:
        translatedContent?.title ||
        `Accommodation at ${hotelData.name}`,
      subtitle:
        translatedContent?.subtitle ||
        'Discover our comfortable and luxurious rooms',
      description:
        translatedContent?.description ||
        `Experience the finest accommodation at ${hotelData.name}. Our rooms are designed for comfort and luxury.`,
    },
  },

  // Rooms with media URLs
  rooms: hotelData.rooms?.map(room => {
    const mainPhoto = room.photos?.[0];
    const videoFile = room.video;

    return {
      id: room.id,
      name: room.name,
      description: room.description,
      max_occupancy: room.max_occupancy,
      size: room.size,
      amenities: room.amenities || [],
      price_per_night: room.price_per_night,
      currency: room.currency || hotelData.default_currency || 'USD',
      photos: room.photos || [],
      mainPhotoUrl: mainPhoto
        ? getMediaUrl(mainPhoto.id, { width: 800, height: 450, quality: 95 })
        : null,
      videoUrl: videoFile ? getMediaUrl(videoFile.id) : null,
      hasVideo: !!videoFile,
      slug: room.name
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, ''),
    };
  }) || [],

  // Theme and branding
  theme: hotelData.theme,
  logo: hotelData.logo,
};

// Get subdomain for theme and other purposes
const hotelSubdomain = isSubdomainBasedRouting(Astro.url.hostname)
  ? getSubdomainFromHostname(Astro.url.hostname)
  : Astro.params.hotel || hotel.domain.split('.')[0];

console.log(
  `✅ Accommodation page loaded: ${hotel.name} (${hotel.rooms?.length || 0} rooms)`
);

// Log video debug info for each room
hotel.rooms?.forEach(room => {
  console.log(
    `🎥 Room ${room.name}: has video = ${room.hasVideo}, videoUrl = ${room.videoUrl}`
  );
});
---

<CollectionPageLayout
  title={hotel.content.accommodation.title}
  description={hotel.content.accommodation.description}
  domain={hotel.domain}
  ga4Id={hotel.analytics.ga4_id}
  pixelId={hotel.analytics.pixel_id}
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  showNavbar={true}
  breadcrumbs={[
    { name: 'Home', href: '/' },
    { name: 'Accommodation', href: '/accommodation' },
  ]}
>
  <!-- Page Header -->
  <div class="text-center mb-12">
    <h1 class="text-4xl md:text-5xl font-primary font-bold text-primary mb-4">
      {hotel.content.accommodation.title}
    </h1>
    <p class="text-xl text-base-content/80 font-secondary max-w-3xl mx-auto">
      {hotel.content.accommodation.subtitle}
    </p>
  </div>

  <!-- Rooms Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      hotel.rooms?.map((room, index) => (
        <RoomCard
          key={room.id}
          room={room}
          hotelSubdomain={hotelSubdomain}
          isOdd={hotel.rooms && hotel.rooms.length % 2 !== 0 && index === hotel.rooms.length - 1}
          client:load
        />
      ))
    }
  </div>

  <!-- Call to Action -->
  <div class="text-center mt-16">
    <div class="bg-base-200 rounded-2xl p-8 max-w-2xl mx-auto">
      <h2 class="text-2xl font-primary font-bold text-primary mb-4">
        Ready to Book Your Stay?
      </h2>
      <p class="text-base-content/80 font-secondary mb-6">
        Experience luxury and comfort at {hotel.name}. Book your perfect room today.
      </p>
      <a
        href="/book"
        class="btn btn-primary btn-lg font-secondary"
      >
        Book Now
      </a>
    </div>
  </div>
</CollectionPageLayout>
