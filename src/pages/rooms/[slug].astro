---
export const prerender = true; // ‚úÖ SSG - Pre-render at build time

import { DetailPageLayout } from '../../components/DetailPageLayout.tsx';
import Layout from '../../layouts/Layout.astro';
import {
  getCurrentHotel,
  getMediaUrl,
  processMediaGallery,
} from '../../lib/directus.js';
import type { Hotel, Room } from '../../types/hotel.ts';

// Generate static paths for all rooms
export async function getStaticPaths() {
  console.log(`üèóÔ∏è [BUILD] Generating static paths for room detail pages...`);

  const hotelData = await getCurrentHotel();

  if (!hotelData || !hotelData.rooms) {
    console.log(`‚ùå [BUILD] No hotel or rooms found`);
    return [];
  }

  const hotel = hotelData as Hotel;

  console.log(
    `‚úÖ [BUILD] Found ${hotel.rooms.length} rooms for hotel: ${hotel.name}`
  );

  const paths = hotel.rooms.map((room: Room) => {
    const slug =
      room.name?.toLowerCase().replace(/\s+/g, '-') || room.id?.toString();
    console.log(
      `üîó [BUILD] Generated path: /rooms/${slug} for room: ${room.name} (ID: ${room.id})`
    );

    return {
      params: { slug },
    };
  });

  console.log(`üìã [BUILD] Generated ${paths.length} room paths`);
  return paths;
}

console.log(`üèóÔ∏è [BUILD] Pre-rendering room detail page...`);

// Get hotel data from environment variable
const hotelData2 = await getCurrentHotel();

if (!hotelData2) {
  throw new Error('Hotel not found. Check HOTEL_ID in environment variables.');
}

const hotel2 = hotelData2 as Hotel;

const { slug } = Astro.params;

console.log(
  `‚úÖ [BUILD] Hotel loaded: ${hotel2.name}, looking for room: ${slug}`
);

// Find the specific room
const room = hotel2.rooms?.find(
  (r: Room) =>
    r.name?.toLowerCase().replace(/\s+/g, '-') === slug ||
    r.slug === slug ||
    r.id?.toString() === slug
);

if (!room) {
  console.error(`‚ùå [BUILD] Room not found: ${slug}`);
  return Astro.redirect('/404');
}

console.log(`‚úÖ [BUILD] Room found: ${room.name} (ID: ${room.id})`);

// Simple theme name extraction
const hotelSlug = hotel2.domain?.split('.')[0] || 'default';

// Process room media
const mainImageUrl = room.main_photo
  ? getMediaUrl(room.main_photo.id || room.main_photo, {
      width: 1200,
      height: 675,
      quality: 95,
    }) || ''
  : '';

const mainVideoUrl = room.main_video
  ? getMediaUrl(room.main_video.id || room.main_video) || ''
  : '';

// Process gallery images with automatic type detection
const galleryImages = processMediaGallery(
  room.media_gallery,
  room.name
) as Array<{
  id: string;
  url: string;
  title?: string;
  type?: 'image' | 'video';
}>;

// Process room metadata
const metadata = {
  sizeSqm: room.size_sqm ? parseInt(room.size_sqm) : undefined,
  bedConfiguration: room.bed_configuration,
  isAccessible: room.is_accesible, // Note: typo in schema
  amenities: room.amenities || [],
};

const pageTitle = `${room.name} - ${hotel2.name}`;
const pageDescription =
  room.description || `Discover ${room.name} at ${hotel2.name}`;
---

<Layout
  title={pageTitle}
  description={pageDescription}
  hotel={hotel2}
  hotelName={hotel2.name}
>
  <DetailPageLayout
    title={room.name}
    description={room.description || ''}
    type="room"
    imageUrl={mainImageUrl}
    videoUrl={mainVideoUrl}
    galleryImages={galleryImages}
    metadata={metadata}
    hotelName={hotel2.name}
    hotelSlug={hotelSlug}
    defaultCurrency={hotel2.default_currency || 'EUR'}
    breadcrumbItems={[
      { label: 'Home', href: '/' },
      { label: 'Accommodation', href: '/accommodation' },
      { label: room.name, href: `/rooms/${slug}` },
    ]}
  />
</Layout>
