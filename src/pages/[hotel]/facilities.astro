---
import { FacilityCard } from '../../components/FacilityCard.tsx';
import CollectionPageLayout from '../../layouts/CollectionPageLayout.astro';
import {
  getAllHotels,
  getHotelByDomain,
  getMediaUrl,
  getTranslatedContent,
} from '../../lib/directus.js';
import {
  isSubdomainBasedRouting,
  getHotelDomainFromRequest,
  getSubdomainFromHostname,
} from '../../lib/domain-mapping.js';

// SSR mode - detect hotel from runtime request
const isSubdomain = isSubdomainBasedRouting(Astro.url.hostname);
const hotelDomain = getHotelDomainFromRequest(Astro.url, Astro.params);
const hotelSubdomain = isSubdomain
  ? getSubdomainFromHostname(Astro.url.hostname)
  : Astro.params.hotel;

console.log(
  `üè® SSR Loading facilities page for subdomain: ${hotelSubdomain}, full domain: ${hotelDomain}`
);

// Get hotel data from Directus
const hotel = await getHotelByDomain(hotelDomain);

if (!hotel) {
  console.error(`‚ùå Hotel not found for domain: ${hotelDomain}`);
  return Astro.redirect('/404');
}

// Extract hotel properties for SSR mode
const hotelId = hotel.id;
const hotelName = hotel.name;
const defaultLanguage = hotel.default_language || 'en-US';
const defaultCurrency = hotel.default_currency || 'USD';

// Get current language from URL or use default
const currentLanguage = defaultLanguage;

// Hotel data is already loaded in the 'hotel' variable from SSR
// No need to rebuild the object, just use it directly

// Get hotel domain and slug
const _hotelDomain = hotel.domain;
const _hotelSlug = hotelSubdomain;

// Breadcrumb items following the same pattern as detail pages
const _breadcrumbItems = [
  { label: hotel.name, href: `/${hotelSubdomain}` },
  { label: 'Facilities' },
];

console.log(
  `‚úÖ Facilities page loaded: ${hotel.name} (${hotel.facilities?.length || 0} facilities)`
);
---

<CollectionPageLayout
  title={`Facilities - ${hotel.name}`}
  description={`Discover our exceptional facilities at ${hotel.name}. From fitness centers to spa services, we offer everything you need for a perfect stay.`}
  pageTitle="Our Facilities"
  pageDescription="Experience our world-class facilities designed to enhance your stay. From relaxation to recreation, we provide everything you need for an unforgettable experience."
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  hotelDomain={_hotelDomain}
  isSubdomain={isSubdomain}
  items={hotel.facilities || []}
  itemType="facilities"
  breadcrumbItems={_breadcrumbItems}
  ctaTitle="Ready to Experience Our Facilities?"
  ctaDescription={`Book your stay at ${hotel.name} and enjoy access to all our exceptional facilities and amenities.`}
  ctaPrimaryText="Book Now"
  ctaPrimaryHref={`/${hotelSubdomain}/book`}
  ctaSecondaryText="Explore More"
  ctaSecondaryHref={`/${hotelSubdomain}`}
  gridId="facilitiesGrid"
>
  <Fragment slot="items">
    {
      hotel.facilities?.map((facility, index) => {
        const imageUrl = facility.main_photo
          ? getMediaUrl(facility.main_photo.id, {
              width: 800,
              height: 450,
              quality: 95,
            })
          : '';
        const videoUrl = facility.main_video
          ? getMediaUrl(facility.main_video.id)
          : undefined;

        // Create slug from facility name
        const facilitySlug = facility.name
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');

        console.log(
          `üé• Facility ${facility.name}: has video = ${!!facility.main_video}, videoUrl = ${videoUrl}`
        );

        return (
          <FacilityCard
            key={facility.id || index}
            name={facility.name}
            description={facility.description}
            facilityType={facility.facility_type}
            capacity={facility.capacity}
            accessType={facility.access_type}
            imageUrl={imageUrl}
            videoUrl={videoUrl}
            isLast={index === hotel.facilities.length - 1}
            isOdd={hotel.facilities.length % 2 !== 0}
            hotelSlug={hotelSubdomain}
            facilitySlug={facilitySlug}
            isSubdomain={isSubdomain}
            client:load
          />
        );
      })
    }
  </Fragment>
</CollectionPageLayout>
