---
import Layout from '../../../layouts/Layout.astro';
import { getAllHotels, getHotelByDomain, getMediaUrl } from '../../../lib/directus.js';
import { DetailPageLayout } from '../../../components/DetailPageLayout';

export const prerender = true;

export async function getStaticPaths() {
  console.log('🏢 Generating static paths for facility pages...');
  
  try {
    const hotels = await getAllHotels();
    const paths = [];
    
    for (const hotel of hotels) {
      console.log(`🏨 Processing hotel: ${hotel.name} (${hotel.domain})`);
      
      // Get full hotel data including facilities
      const fullHotel = await getHotelByDomain(hotel.domain);
      if (!fullHotel || !fullHotel.facilities) {
        console.log(`⚠️ No facilities found for hotel: ${hotel.name}`);
        continue;
      }
      
      // Extract subdomain from full domain (e.g., "demo" from "demo.daotomata.io")
      const subdomain = hotel.domain.split('.')[0];
      
      // Generate paths for each facility
      for (const facility of fullHotel.facilities) {
        // Create slug from facility name
        const slug = facility.name.toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
        
        paths.push({
          params: { 
            hotel: subdomain,
            slug: slug
          },
          props: {
            facility,
            hotel: fullHotel,
            hotelSubdomain: subdomain,
            defaultLanguage: hotel.default_language || 'en-US',
            defaultCurrency: hotel.default_currency || 'USD',
          }
        });
      }
    }
    
    console.log(`✅ Generated ${paths.length} facility page paths`);
    return paths;
  } catch (error) {
    console.error('❌ Error generating facility static paths:', error);
    return [];
  }
}

const { facility, hotel, hotelSubdomain, defaultLanguage, defaultCurrency } = Astro.props;

// Hotel theme data will be handled globally by Layout.astro



// Prepare facility data for DetailPageLayout
const imageUrl = facility.main_photo ? getMediaUrl(facility.main_photo.id, { width: 1200, height: 675, quality: 95 }) : '';
const videoUrl = facility.main_video ? getMediaUrl(facility.main_video.id) : undefined;

// Process media gallery
const galleryImages = [];
if (facility.media_gallery && Array.isArray(facility.media_gallery)) {
  for (const mediaItem of facility.media_gallery) {
    // media_gallery now contains objects with directus_files_id
    if (mediaItem && mediaItem.directus_files_id) {
      const file = mediaItem.directus_files_id;
      const isVideo = file.type?.startsWith('video/');
      const mediaUrl = isVideo ? getMediaUrl(file.id) : getMediaUrl(file.id, { width: 800, height: 600, quality: 90 });
      galleryImages.push({
        id: file.id,
        url: mediaUrl,
        title: file.title || 'Facility Gallery Image',
        type: isVideo ? 'video' : 'image'
      });
    }
  }
}

// Sort gallery images: videos first, then images
galleryImages.sort((a, b) => {
  if (a.type === 'video' && b.type === 'image') return -1;
  if (a.type === 'image' && b.type === 'video') return 1;
  return 0;
});

// Convert operating_hours object to string for display
const operatingHoursString = facility.operating_hours
  ? (typeof facility.operating_hours === 'object'
      ? Object.entries(facility.operating_hours)
          .map(([day, hours]) => `${day}: ${hours}`)
          .join(', ')
      : facility.operating_hours)
  : null;

// Convert amenities array to string array if needed
const facilityAmenities = Array.isArray(facility.amenities) ? facility.amenities : [];

const facilityMetadata = {
  facilityCategory: facility.category,
  facilityLocation: facility.location,
  capacity: facility.capacity,
  operatingHours: operatingHoursString,
  facilityBookingRequired: facility.booking_required,
  pricePerHour: facility.price_per_hour ? `${facility.price_per_hour}` : undefined,
  facilityAmenities: facilityAmenities,
  facilityAgeRestriction: facility.age_restriction,
  dressCode: facility.dress_code,
  facilityIsAccessible: facility.is_accessible,
};

const breadcrumbItems = [
  { label: hotel.name, href: `/${hotelSubdomain}` },
  { label: 'Facilities', href: `/${hotelSubdomain}#facilities` },
  { label: facility.name }
];
---

<Layout
  title={`${facility.name} - ${hotel.name}`}
  description={facility.description || `Enjoy our ${facility.name} facility at ${hotel.name}`}
  domain={hotel.domain}
  ga4Id={hotel.analytics?.ga4_id}
  pixelId={hotel.analytics?.pixel_id}
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  showNavbar={true}
>
  <DetailPageLayout
    title={facility.name}
    description={facility.description || `Experience our ${facility.name} facility.`}
    type="facility"
    imageUrl={imageUrl}
    videoUrl={videoUrl}
    galleryImages={galleryImages}
    metadata={facilityMetadata}
    hotelName={hotel.name}
    hotelSlug={hotelSubdomain}
    defaultCurrency={defaultCurrency}
    breadcrumbItems={breadcrumbItems}
    client:load
  />
</Layout>
