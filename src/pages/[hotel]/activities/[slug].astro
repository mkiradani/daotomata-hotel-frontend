---
// biome-ignore lint/correctness/noUnusedImports: DetailPageLayout is used in JSX below
import { DetailPageLayout } from '../../../components/DetailPageLayout.tsx';
// biome-ignore lint/correctness/noUnusedImports: Layout is used in JSX below
import Layout from '../../../layouts/Layout.astro';
import { getAllHotels, getHotelByDomain, getMediaUrl } from '../../../lib/directus.js';

export const prerender = true;

export async function getStaticPaths() {
  console.log('🎯 Generating static paths for activity pages...');

  try {
    const hotels = await getAllHotels();
    const paths = [];

    for (const hotel of hotels) {
      console.log(`🏨 Processing hotel: ${hotel.name} (${hotel.domain})`);

      // Get full hotel data including activities
      const fullHotel = await getHotelByDomain(hotel.domain);
      if (!fullHotel || !fullHotel.activities) {
        console.log(`⚠️ No activities found for hotel: ${hotel.name}`);
        continue;
      }

      // Extract subdomain from full domain (e.g., "demo" from "demo.daotomata.io")
      const subdomain = hotel.domain.split('.')[0];

      // Generate paths for each activity
      for (const activity of fullHotel.activities) {
        // Create slug from activity name
        const slug = activity.name
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');

        paths.push({
          params: {
            hotel: subdomain,
            slug: slug,
          },
          props: {
            activity,
            hotel: fullHotel,
            hotelSubdomain: subdomain,
            defaultLanguage: hotel.default_language || 'en-US',
            defaultCurrency: hotel.default_currency || 'USD',
          },
        });
      }
    }

    console.log(`✅ Generated ${paths.length} activity page paths`);
    return paths;
  } catch (error) {
    console.error('❌ Error generating activity static paths:', error);
    return [];
  }
}

const {
  activity,
  hotel,
  hotelSubdomain,
  // biome-ignore lint/correctness/noUnusedVariables: defaultLanguage is part of the data structure for future use
  defaultLanguage,
  // biome-ignore lint/correctness/noUnusedVariables: defaultCurrency is used in JSX below
  defaultCurrency,
} = Astro.props;

// Hotel theme data will be handled globally by Layout.astro

// Prepare activity data for DetailPageLayout
// biome-ignore lint/correctness/noUnusedVariables: imageUrl is used in JSX below
const imageUrl = activity.main_photo
  ? getMediaUrl(activity.main_photo.id, { width: 1200, height: 675, quality: 95 })
  : '';
// biome-ignore lint/correctness/noUnusedVariables: videoUrl is used in JSX below
const videoUrl = activity.main_video ? getMediaUrl(activity.main_video.id) : undefined;

// Process media gallery
const galleryImages = [];
if (activity.media_gallery && Array.isArray(activity.media_gallery)) {
  for (const mediaItem of activity.media_gallery) {
    // media_gallery now contains objects with directus_files_id
    if (mediaItem?.directus_files_id) {
      const file = mediaItem.directus_files_id;
      const isVideo = file.type?.startsWith('video/');
      const mediaUrl = isVideo
        ? getMediaUrl(file.id)
        : getMediaUrl(file.id, { width: 800, height: 600, quality: 90 });
      galleryImages.push({
        id: file.id,
        url: mediaUrl,
        title: file.title || 'Activity Gallery Image',
        type: isVideo ? 'video' : 'image',
      });
    }
  }
}

// Sort gallery images: videos first, then images
galleryImages.sort((a, b) => {
  if (a.type === 'video' && b.type === 'image') return -1;
  if (a.type === 'image' && b.type === 'video') return 1;
  return 0;
});

// biome-ignore lint/correctness/noUnusedVariables: activityMetadata is used in JSX below
const activityMetadata = {
  category: activity.category,
  durationMinutes: activity.duration_minutes,
  maxParticipants: activity.max_participants,
  price: activity.price ? `${activity.price}` : undefined,
  location: activity.location,
  difficultyLevel: activity.difficulty_level,
  ageRestriction: activity.age_restriction,
  equipmentProvided: activity.equipment_provided,
  bookingRequired: activity.booking_required,
};

// biome-ignore lint/correctness/noUnusedVariables: breadcrumbItems is used in JSX below
const breadcrumbItems = [
  { label: hotel.name, href: `/${hotelSubdomain}` },
  { label: 'Activities', href: `/${hotelSubdomain}#activities` },
  { label: activity.name },
];
---

<Layout
  title={`${activity.name} - ${hotel.name}`}
  description={activity.description || `Join our exciting ${activity.name} activity at ${hotel.name}`}
  domain={hotel.domain}
  ga4Id={hotel.analytics?.ga4_id}
  pixelId={hotel.analytics?.pixel_id}
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  showNavbar={true}
>
  <DetailPageLayout
    title={activity.name}
    description={activity.description || `Experience our exciting ${activity.name} activity.`}
    type="activity"
    imageUrl={imageUrl}
    videoUrl={videoUrl}
    galleryImages={galleryImages}
    metadata={activityMetadata}
    hotelName={hotel.name}
    hotelSlug={hotelSubdomain}
    defaultCurrency={defaultCurrency}
    breadcrumbItems={breadcrumbItems}
    client:load
  />
</Layout>
