---
import { DetailPageLayout } from '../../../components/DetailPageLayout.tsx';
import Layout from '../../../layouts/Layout.astro';
import { getHotelByDomain, getMediaUrl } from '../../../lib/directus.js';
import {
  isSubdomainBasedRouting,
  getHotelDomainFromRequest,
  getSubdomainFromHostname,
} from '../../../lib/domain-mapping.js';

// SSR mode - detect hotel from runtime request
console.log(`🔍 [ROOM DETAIL] === DEBUGGING SSR ROUTING ===`);
console.log(`🔍 [ROOM DETAIL] URL: ${Astro.url.href}`);
console.log(`🔍 [ROOM DETAIL] Hostname: ${Astro.url.hostname}`);
console.log(`🔍 [ROOM DETAIL] Pathname: ${Astro.url.pathname}`);
console.log(`🔍 [ROOM DETAIL] Params:`, Astro.params);

const isSubdomain = isSubdomainBasedRouting(Astro.url.hostname);
console.log(`🔍 [ROOM DETAIL] isSubdomain: ${isSubdomain}`);

const hotelDomain = getHotelDomainFromRequest(Astro.url, Astro.params);
console.log(`🔍 [ROOM DETAIL] hotelDomain: ${hotelDomain}`);

const hotelSubdomain = isSubdomain
  ? getSubdomainFromHostname(Astro.url.hostname)
  : Astro.params.hotel;
console.log(`🔍 [ROOM DETAIL] hotelSubdomain: ${hotelSubdomain}`);

console.log(
  `🏨 SSR Loading room page for subdomain: ${hotelSubdomain}, slug: ${Astro.params.slug}`
);

// Get hotel data from Directus
console.log(`🔍 [ROOM DETAIL] Fetching hotel data from Directus...`);
const hotel = await getHotelByDomain(hotelDomain);

if (!hotel) {
  console.error(`❌ [ROOM DETAIL] Hotel not found for domain: ${hotelDomain}`);
  return Astro.redirect('/404');
}

console.log(`✅ [ROOM DETAIL] Hotel found: ${hotel.name} (ID: ${hotel.id})`);
console.log(`🔍 [ROOM DETAIL] Hotel rooms count: ${hotel.rooms?.length || 0}`);
console.log(
  `🔍 [ROOM DETAIL] Available rooms:`,
  hotel.rooms?.map((r) => r.name) || []
);

// Find the room by slug
const roomSlug = Astro.params.slug;
console.log(`🔍 [ROOM DETAIL] Looking for room with slug: ${roomSlug}`);

const room = hotel.rooms?.find((r) => {
  const slug = r.name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
  console.log(`🔍 [ROOM DETAIL] Comparing "${slug}" with "${roomSlug}"`);
  return slug === roomSlug;
});

if (!room) {
  console.error(`❌ [ROOM DETAIL] Room not found for slug: ${roomSlug}`);
  console.error(
    `❌ [ROOM DETAIL] Available room slugs:`,
    hotel.rooms?.map((r) => {
      return r.name
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '');
    }) || []
  );
  return Astro.redirect('/404');
}

console.log(`✅ [ROOM DETAIL] Room found: ${room.name}`);

// Default values
const defaultLanguage = hotel.default_language || 'en-US';
const defaultCurrency = hotel.default_currency || 'USD';

// Hotel theme data will be handled globally by Layout.astro

// Prepare room data for DetailPageLayout
const _imageUrl = room.main_photo
  ? getMediaUrl(room.main_photo.id, { width: 1200, height: 675, quality: 95 })
  : '';
const _videoUrl = room.main_video ? getMediaUrl(room.main_video.id) : undefined;

// Process media gallery
const galleryImages = [];
if (room.media_gallery && Array.isArray(room.media_gallery)) {
  for (const mediaItem of room.media_gallery) {
    // media_gallery now contains objects with directus_files_id
    if (mediaItem?.directus_files_id) {
      const file = mediaItem.directus_files_id;
      const isVideo = file.type?.startsWith('video/');
      const mediaUrl = isVideo
        ? getMediaUrl(file.id)
        : getMediaUrl(file.id, { width: 800, height: 600, quality: 90 });
      console.log(
        `🎬 Media file ${file.id}: type="${file.type}", filename="${file.filename_download}", isVideo=${isVideo}`
      );
      galleryImages.push({
        id: file.id,
        url: mediaUrl,
        title: file.title || 'Gallery Image',
        type: isVideo ? 'video' : 'image',
      });
    }
  }
}

// Sort gallery images: videos first, then images
galleryImages.sort((a, b) => {
  if (a.type === 'video' && b.type === 'image') return -1;
  if (a.type === 'image' && b.type === 'video') return 1;
  return 0;
});

// Convert amenities array to string array if needed
const amenities = Array.isArray(room.amenities) ? room.amenities : [];

const _roomMetadata = {
  roomType: room.room_type,
  maxOccupancy: room.max_occupancy,
  sizeSqm: room.size_sqm,
  bedConfiguration: room.bed_configuration,
  viewType: room.view_type,
  floorNumber: room.floor_number,
  isAccessible: room.is_accessible,
  amenities: amenities,
  basePrice: room.base_price ? `${room.base_price}` : undefined,
};

const _breadcrumbItems = [
  {
    label: hotel.name,
    href: isSubdomain ? '/' : `/${hotelSubdomain}`,
  },
  {
    label: 'Rooms',
    href: isSubdomain ? '/accommodation' : `/${hotelSubdomain}/accommodation`,
  },
  { label: room.name },
];

// TODO: Future Cloudbeds integration
const _availabilityData = {
  isAvailable: true,
  nextAvailableDate: undefined,
  priceRange: undefined,
};
---

<Layout
  title={`${room.name} - ${hotel.name}`}
  description={room.description ||
    `Experience luxury in our ${room.name} at ${hotel.name}`}
  domain={hotel.domain}
  ga4Id={hotel.analytics?.ga4_id}
  pixelId={hotel.analytics?.pixel_id}
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  showNavbar={true}
>
  <DetailPageLayout
    title={room.name}
    description={room.description ||
      `Experience luxury and comfort in our ${room.name}.`}
    type="room"
    imageUrl={_imageUrl}
    videoUrl={_videoUrl}
    galleryImages={galleryImages}
    metadata={_roomMetadata}
    hotelName={hotel.name}
    hotelSlug={hotelSubdomain}
    defaultCurrency={defaultCurrency}
    breadcrumbItems={_breadcrumbItems}
    availabilityData={_availabilityData}
    client:load
  />
</Layout>
