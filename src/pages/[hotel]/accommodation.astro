---
// biome-ignore lint/correctness/noUnusedImports: RoomCard is used in JSX below
import { RoomCard } from '../../components/RoomCard.tsx';
// biome-ignore lint/correctness/noUnusedImports: CollectionPageLayout is used in JSX below
import CollectionPageLayout from '../../layouts/CollectionPageLayout.astro';
import {
  getAllHotels,
  getHotelByDomain,
  // biome-ignore lint/correctness/noUnusedImports: getMediaUrl is used multiple times in JSX below
  getMediaUrl,
  getTranslatedContent,
} from '../../lib/directus.js';

export const prerender = true;

export async function getStaticPaths() {
  console.log('🏨 Generating static paths for accommodation pages...');

  try {
    const hotels = await getAllHotels();
    console.log(
      `✅ Found ${hotels.length} hotels:`,
      hotels.map((h) => h.domain)
    );

    return hotels.map((hotel) => {
      // Extract subdomain from full domain (e.g., "demo" from "demo.daotomata.io")
      const subdomain = hotel.domain.split('.')[0];
      return {
        params: { hotel: subdomain },
        props: {
          hotelId: hotel.id,
          hotelName: hotel.name,
          hotelDomain: hotel.domain,
          hotelSubdomain: subdomain,
          defaultLanguage: hotel.default_language || 'en-US',
          defaultCurrency: hotel.default_currency || 'USD',
          availableLanguages: hotel.available_languages || ['en-US'],
          availableCurrencies: hotel.available_currencies || ['USD'],
        },
      };
    });
  } catch (error) {
    console.error('❌ Error generating static paths:', error);
    return [];
  }
}

const { hotel: hotelSubdomain } = Astro.params;
const {
  // biome-ignore lint/correctness/noUnusedVariables: hotelId is part of the data structure
  hotelId,
  // biome-ignore lint/correctness/noUnusedVariables: hotelName is used in JSX below
  hotelName,
  hotelDomain,
  defaultLanguage,
  // biome-ignore lint/correctness/noUnusedVariables: defaultCurrency is used in JSX below
  defaultCurrency,
  // biome-ignore lint/correctness/noUnusedVariables: availableLanguages is used in JSX below
  availableLanguages,
  // biome-ignore lint/correctness/noUnusedVariables: availableCurrencies is used in JSX below
  availableCurrencies,
} = Astro.props;

console.log(`🏨 Loading accommodation page for subdomain: ${hotelSubdomain}, full domain: ${hotelDomain}`);

// Load complete hotel data from Directus using full domain
const hotelData = await getHotelByDomain(hotelDomain);

if (!hotelData) {
  console.error(`❌ Hotel not found: ${hotelDomain}`);
  return Astro.redirect('/404');
}

// Get current language (could be from URL params, cookies, etc.)
const currentLanguage = defaultLanguage;

// Process hotel data with translations
const hotel = {
  // Base hotel properties
  id: hotelData.id,
  name: hotelData.name,
  domain: hotelData.domain,
  default_language: hotelData.default_language,
  default_currency: hotelData.default_currency,
  available_languages: hotelData.available_languages,
  available_currencies: hotelData.available_currencies,

  // Theme data from Directus
  theme: hotelData.theme || {},
  logo: hotelData.logo || null,

  // Contact information
  contact_email: hotelData.contact_email || null,
  contact_phone_calls: hotelData.contact_phone_calls || null,
  contact_phone_messages: hotelData.contact_phone_messages || null,
  location: hotelData.location || null,

  // Related data with translations - focus on rooms for accommodation page
  rooms: hotelData.rooms?.map((room) => getTranslatedContent(room, currentLanguage)) || [],

  // Other related data
  analytics: hotelData.analytics || null,
  chatwoot_accounts: hotelData.chatwoot_accounts || [],
};

// Simple theme name extraction - no dynamic CSS generation needed
const hotelSlug = hotel.domain.split('.')[0];
const themeName = hotel.theme?.name || `${hotelSlug}-theme`;

// Breadcrumb items following the same pattern as detail pages
const breadcrumbItems = [
  { label: hotel.name, href: `/${hotelSubdomain}` },
  { label: 'Accommodation' },
];

console.log(
  `✅ Accommodation page loaded: ${hotel.name} (${hotel.rooms?.length || 0} rooms)`
);
---

<CollectionPageLayout
  title={`Accommodation - ${hotel.name}`}
  description={`Discover our comfortable and luxurious rooms at ${hotel.name}. Choose from a variety of accommodation options to suit your needs.`}
  pageTitle="Our Accommodation"
  pageDescription="Discover our comfortable and luxurious rooms designed to provide you with the perfect stay experience. Each room combines modern amenities with thoughtful design."
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  hotelDomain={hotelDomain}
  items={hotel.rooms || []}
  itemType="rooms"
  breadcrumbItems={breadcrumbItems}
  ctaTitle="Ready to Book Your Perfect Room?"
  ctaDescription={`Choose from our selection of comfortable rooms at ${hotel.name} and enjoy a memorable stay with us.`}
  ctaPrimaryText="Book Now"
  ctaPrimaryHref={`/${hotelSubdomain}/book`}
  ctaSecondaryText="Explore More"
  ctaSecondaryHref={`/${hotelSubdomain}`}
  gridId="roomsGrid"
>
  <Fragment slot="items">
    {hotel.rooms?.map((room, index) => {
      const imageUrl = room.main_photo ? getMediaUrl(room.main_photo.id, { width: 800, height: 450, quality: 95 }) : '';
      const videoUrl = room.main_video ? getMediaUrl(room.main_video.id) : undefined;

      // Create slug from room name
      const roomSlug = room.name.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '');

      console.log(`🎥 Room ${room.name}: has video = ${!!room.main_video}, videoUrl = ${videoUrl}`);

      return (
        <RoomCard
          key={room.id || index}
          name={room.name}
          description={room.description}
          bedConfiguration={room.bed_configuration}
          sizeSqm={room.size_sqm}
          basePrice={room.base_price}
          defaultCurrency={defaultCurrency}
          imageUrl={imageUrl}
          videoUrl={videoUrl}
          isLast={index === hotel.rooms.length - 1}
          isOdd={hotel.rooms.length % 2 !== 0}
          hotelSlug={hotelSubdomain}
          roomSlug={roomSlug}
          client:load
        />
      );
    })}
  </Fragment>
</CollectionPageLayout>


