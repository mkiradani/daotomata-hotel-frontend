---
// biome-ignore lint/correctness/noUnusedImports: ActivityCard is used in JSX below
import { ActivityCard } from '../components/ActivityCard.tsx';
// biome-ignore lint/correctness/noUnusedImports: FacilityCard is used in JSX below
import { FacilityCard } from '../components/FacilityCard.tsx';
// biome-ignore lint/correctness/noUnusedImports: HeroSection is used in JSX below
import { HeroSection } from '../components/HeroSection.tsx';
// biome-ignore lint/correctness/noUnusedImports: RoomCard is used in JSX below
import { RoomCard } from '../components/RoomCard.tsx';
// biome-ignore lint/correctness/noUnusedImports: Layout is used in JSX below
import Layout from '../layouts/Layout.astro';
import {
  getAllHotels,
  getHotelByDomain,
  // biome-ignore lint/correctness/noUnusedImports: getMediaUrl is used multiple times in JSX below
  getMediaUrl,
  getTranslatedContent,
} from '../lib/directus.js';

export const prerender = true;

export async function getStaticPaths() {
  console.log('üè® Generating static paths for hotels...');

  try {
    const hotels = await getAllHotels();
    console.log(
      `‚úÖ Found ${hotels.length} hotels:`,
      hotels.map((h) => h.domain)
    );

    return hotels.map((hotel) => {
      // Extract subdomain from full domain (e.g., "demo" from "demo.daotomata.io")
      const subdomain = hotel.domain.split('.')[0];
      return {
        params: { hotel: subdomain },
        props: {
          hotelId: hotel.id,
          hotelName: hotel.name,
          hotelDomain: hotel.domain,
          hotelSubdomain: subdomain,
          defaultLanguage: hotel.default_language || 'en-US',
          defaultCurrency: hotel.default_currency || 'USD',
          availableLanguages: hotel.available_languages || ['en-US'],
          availableCurrencies: hotel.available_currencies || ['USD'],
        },
      };
    });
  } catch (error) {
    console.error('‚ùå Error generating static paths:', error);
    return [];
  }
}

const { hotel: hotelSubdomain } = Astro.params;
const {
  // biome-ignore lint/correctness/noUnusedVariables: hotelId is part of the data structure
  hotelId,
  // biome-ignore lint/correctness/noUnusedVariables: hotelName is used in JSX below
  hotelName,
  hotelDomain,
  defaultLanguage,
  // biome-ignore lint/correctness/noUnusedVariables: defaultCurrency is used in JSX below
  defaultCurrency,
  // biome-ignore lint/correctness/noUnusedVariables: availableLanguages is used in JSX below
  availableLanguages,
  // biome-ignore lint/correctness/noUnusedVariables: availableCurrencies is used in JSX below
  availableCurrencies,
} = Astro.props;

console.log(`üè® Loading hotel data for subdomain: ${hotelSubdomain}, full domain: ${hotelDomain}`);

// Load complete hotel data from Directus using full domain
const hotelData = await getHotelByDomain(hotelDomain);

if (!hotelData) {
  console.error(`‚ùå Hotel not found: ${hotelDomain}`);
  return Astro.redirect('/404');
}

// Get current language (could be from URL params, cookies, etc.)
const currentLanguage = defaultLanguage;

// Process hotel data with translations
const hotel = {
  // Base hotel properties
  id: hotelData.id,
  name: hotelData.name,
  domain: hotelData.domain,
  default_language: hotelData.default_language,
  default_currency: hotelData.default_currency,
  available_languages: hotelData.available_languages,
  available_currencies: hotelData.available_currencies,

  // Theme data from Directus
  theme: hotelData.theme || {},
  logo: hotelData.logo || null,

  // Related data with translations
  rooms: hotelData.rooms?.map((room) => getTranslatedContent(room, currentLanguage)) || [],
  activities:
    hotelData.activities?.map((activity) => getTranslatedContent(activity, currentLanguage)) || [],
  facilities:
    hotelData.facilities?.map((facility) => getTranslatedContent(facility, currentLanguage)) || [],
  galleries:
    hotelData.galleries?.map((gallery) => getTranslatedContent(gallery, currentLanguage)) || [],
  menu_items:
    hotelData.menu_items?.map((item) => getTranslatedContent(item, currentLanguage)) || [],

  // Other related data
  analytics: hotelData.analytics || null,
  chatwoot_accounts: hotelData.chatwoot_accounts || [],
  hero_media: hotelData.hero_media || [],
};

// Simple theme name extraction - no dynamic CSS generation needed
const hotelSlug = hotel.domain.split('.')[0];
const themeName = hotel.theme?.name || `${hotelSlug}-theme`;



// Get hero media and hotel logo
const _heroPhoto = hotel.hero_media?.[0]?.main_photo;
const _heroVideo = hotel.hero_media?.[0]?.main_video;
const _hotelLogo = hotel.logo;

console.log(
  `‚úÖ Hotel loaded: ${hotel.name} (${hotel.rooms?.length || 0} rooms, ${hotel.activities?.length || 0} activities, ${hotel.facilities?.length || 0} facilities)`
);
---

<Layout
  title={hotel.name}
  description={`Welcome to ${hotel.name} - Experience luxury and comfort`}
  domain={hotelDomain}
  ga4Id={hotel.analytics?.ga4_id}
  pixelId={hotel.analytics?.pixel_id}
  hotel={hotel}
  hotelSubdomain={hotelSubdomain}
  showNavbar={true}
>
  <!-- Hero Section -->
  {console.log('üñºÔ∏è Hero media debug:', {
    heroPhoto: _heroPhoto,
    heroPhotoId: _heroPhoto?.id,
    heroVideo: _heroVideo,
    heroVideoId: _heroVideo?.id,
    hotelLogo: _hotelLogo,
    hotelLogoId: _hotelLogo?.id
  })}
  <HeroSection
    hotelName={hotel.name}
    heroImageUrl={_heroPhoto ? getMediaUrl(_heroPhoto.id, { width: 1920, height: 1080, quality: 90 }) : undefined}
    heroVideoUrl={_heroVideo ? getMediaUrl(_heroVideo.id, { quality: 90 }) : undefined}
    availableLanguages={availableLanguages}
    availableCurrencies={availableCurrencies}
    currentLanguage={currentLanguage}
    defaultCurrency={defaultCurrency}
    client:load
  />

  <!-- Rooms Section -->
  {hotel.rooms && hotel.rooms.length > 0 && (
    <section class="px-4 py-20">
      <div class="mx-auto max-w-7xl">
        <h2 class="mb-16 font-primary font-bold text-primary text-4xl text-center">
          Our Rooms
        </h2>
        <div class="gap-8 grid grid-cols-1 md:grid-cols-2">
          {hotel.rooms.map((room, index) => {
            const imageUrl = room.main_photo ? getMediaUrl(room.main_photo.id, { width: 800, height: 450, quality: 95 }) : '';
            const videoUrl = room.main_video ? getMediaUrl(room.main_video.id) : undefined;

            // Create slug from room name
            const roomSlug = room.name.toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/(^-|-$)/g, '');

            console.log(`üé• Room ${room.name}: has video = ${!!room.main_video}, videoUrl = ${videoUrl}`);

            return (
              <RoomCard
                key={room.id || index}
                name={room.name}
                description={room.description}
                roomType={room.room_type}
                maxOccupancy={room.max_occupancy}
                sizeSqm={room.size_sqm}
                basePrice={room.base_price}
                defaultCurrency={defaultCurrency}
                imageUrl={imageUrl}
                videoUrl={videoUrl}
                isLast={index === hotel.rooms.length - 1}
                isOdd={hotel.rooms.length % 2 !== 0}
                hotelSlug={hotelSubdomain}
                roomSlug={roomSlug}
                client:load
              />
            );
          })}
        </div>
      </div>
    </section>
  )}

  <!-- Activities Section -->
  {hotel.activities && hotel.activities.length > 0 && (
    <section class="bg-base-200 px-4 py-20">
      <div class="mx-auto max-w-7xl">
        <h2 class="mb-16 font-primary font-bold text-primary text-4xl text-center">
          Activities & Experiences
        </h2>
        <div class="gap-8 grid grid-cols-1 md:grid-cols-2">
          {hotel.activities.map((activity, index) => {
            const imageUrl = activity.main_photo ? getMediaUrl(activity.main_photo.id, { width: 800, height: 450, quality: 95 }) : '';
            const videoUrl = activity.main_video ? getMediaUrl(activity.main_video.id) : undefined;

            // Create slug from activity name
            const activitySlug = activity.name.toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/(^-|-$)/g, '');

            return (
              <ActivityCard
                key={activity.id || index}
                name={activity.name}
                description={activity.description}
                category={activity.category}
                durationMinutes={activity.duration_minutes}
                difficultyLevel={activity.difficulty_level}
                price={activity.price}
                defaultCurrency={defaultCurrency}
                imageUrl={imageUrl}
                videoUrl={videoUrl}
                isLast={index === hotel.activities.length - 1}
                isOdd={hotel.activities.length % 2 !== 0}
                hotelSlug={hotelSubdomain}
                activitySlug={activitySlug}
                client:load
              />
            );
          })}
        </div>
      </div>
    </section>
  )}

  <!-- Facilities Section -->
  {hotel.facilities && hotel.facilities.length > 0 && (
    <section class="px-4 py-20">
      <div class="mx-auto max-w-7xl">
        <h2 class="mb-16 font-primary font-bold text-primary text-4xl text-center">
          Our Facilities
        </h2>
        <div class="gap-8 grid grid-cols-1 md:grid-cols-2">
          {hotel.facilities.map((facility, index) => {
            const imageUrl = facility.main_photo ? getMediaUrl(facility.main_photo.id, { width: 800, height: 450, quality: 95 }) : '';
            const videoUrl = facility.main_video ? getMediaUrl(facility.main_video.id) : undefined;

            // Create slug from facility name
            const facilitySlug = facility.name.toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/(^-|-$)/g, '');

            console.log(`üé• Facility ${facility.name}: has video = ${!!facility.main_video}, videoUrl = ${videoUrl}`);

            return (
              <FacilityCard
                key={facility.id || index}
                name={facility.name}
                description={facility.description}
                facilityType={facility.facility_type}
                capacity={facility.capacity}
                accessType={facility.access_type}
                imageUrl={imageUrl}
                videoUrl={videoUrl}
                isLast={index === hotel.facilities.length - 1}
                isOdd={hotel.facilities.length % 2 !== 0}
                hotelSlug={hotelSubdomain}
                facilitySlug={facilitySlug}
                client:load
              />
            );
          })}
        </div>
      </div>
    </section>
  )}

  <!-- Footer -->
  <footer class="bg-primary px-4 py-12 text-primary-content">
    <div class="mx-auto max-w-7xl text-white text-center">
      <h3 class="mb-4 font-primary font-bold text-2xl">{hotel.name}</h3>
      <p class="opacity-90 mb-4">Dynamic Multitenant Architecture - Domain: {hotelDomain}</p>
      <p class="opacity-75 text-sm">
        Languages: {availableLanguages.join(', ')} | Currencies: {availableCurrencies.join(', ')}
      </p>
      {hotel.chatwoot_accounts?.[0] && (
        <p class="opacity-75 mt-2 text-sm">
          Chat Account: {hotel.chatwoot_accounts[0].account_id}
        </p>
      )}
    </div>
  </footer>
</Layout>

<script>
  // Parallax scroll effect for hero section
  function initParallax() {
    const parallaxElements = document.querySelectorAll('.parallax-video, .parallax-image');

    function updateParallax() {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.5; // Negative for upward movement

      parallaxElements.forEach(element => {
        element.style.transform = `translateY(${rate}px) translateZ(0)`;
      });
    }

    // Throttle scroll events for performance
    let ticking = false;
    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
        setTimeout(() => { ticking = false; }, 16); // ~60fps
      }
    }

    window.addEventListener('scroll', requestTick);
    updateParallax(); // Initial call
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initParallax);
  } else {
    initParallax();
  }
</script>
