---
// Debug page for Chatwoot widget communication
import Layout from '../layouts/Layout.astro';
import ChatwootWidget from '../components/ChatwootWidget.astro';
---

<Layout title="Chatwoot Debug - Test Bidirectional Communication">
  <main class="mx-auto px-4 py-8 container">
    <h1 class="mb-8 font-bold text-4xl">üîç Chatwoot Widget Debug</h1>
    
    <div class="gap-6 grid md:grid-cols-2">
      <div class="bg-base-100 shadow-xl card">
        <div class="card-body">
          <h2 class="card-title">Widget Status</h2>
          <div id="widget-status" class="text-sm">
            <p>‚è≥ Checking widget status...</p>
          </div>
          <div class="justify-end card-actions">
            <button class="btn btn-primary" onclick="checkWidgetStatus()">Refresh Status</button>
          </div>
        </div>
      </div>

      <div class="bg-base-100 shadow-xl card">
        <div class="card-body">
          <h2 class="card-title">WebSocket Debug</h2>
          <div id="websocket-status" class="text-sm">
            <p>‚è≥ Checking WebSocket connection...</p>
          </div>
          <div class="justify-end card-actions">
            <button class="btn btn-secondary" onclick="testWebSocket()">Test WebSocket</button>
          </div>
        </div>
      </div>
    </div>

    <div class="mt-8">
      <div class="bg-base-100 shadow-xl card">
        <div class="card-body">
          <h2 class="card-title">Console Logs</h2>
          <div id="console-logs" class="bg-gray-100 p-4 rounded max-h-64 overflow-y-auto font-mono text-sm">
            <p>üìã Console logs will appear here...</p>
          </div>
          <div class="justify-end card-actions">
            <button class="btn btn-accent" onclick="clearLogs()">Clear Logs</button>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-info mt-8 p-4 rounded text-info-content">
      <h3 class="font-bold">üß™ Testing Instructions:</h3>
      <ol class="mt-2 list-decimal list-inside">
        <li>Open this page and check widget status</li>
        <li>Send a message from the widget to Chatwoot</li>
        <li>Reply from Chatwoot dashboard</li>
        <li>Check if the reply appears in the widget</li>
        <li>Monitor console logs for WebSocket errors</li>
      </ol>
    </div>
  </main>

  <script>
    let logs = [];
    
    function addLog(message, type = 'info') {
      const timestamp = new Date().toLocaleTimeString();
      const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${message}`;
      logs.push(logEntry);
      updateLogsDisplay();
    }
    
    function updateLogsDisplay() {
      const logsDiv = document.getElementById('console-logs');
      logsDiv.innerHTML = logs.map(log => `<p>${log}</p>`).join('');
      logsDiv.scrollTop = logsDiv.scrollHeight;
    }
    
    function clearLogs() {
      logs = [];
      updateLogsDisplay();
    }
    
    function checkWidgetStatus() {
      const statusDiv = document.getElementById('widget-status');
      
      if (window.chatwootSDK) {
        statusDiv.innerHTML = `
          <p>‚úÖ Chatwoot SDK: Loaded</p>
          <p>üîß SDK Version: ${window.chatwootSDK.version || 'Unknown'}</p>
          <p>üåê Base URL: ${window.chatwootSDK.baseUrl || 'Not set'}</p>
          <p>üîë Token: ${window.chatwootSDK.websiteToken ? 'Set' : 'Not set'}</p>
        `;
        addLog('Widget status checked - SDK loaded');
      } else {
        statusDiv.innerHTML = `<p>‚ùå Chatwoot SDK: Not loaded</p>`;
        addLog('Widget status checked - SDK not loaded', 'error');
      }
    }
    
    function testWebSocket() {
      const wsStatusDiv = document.getElementById('websocket-status');
      
      try {
        // Test WebSocket connection to Chatwoot
        const wsUrl = 'ws://localhost:3000/cable';
        const ws = new WebSocket(wsUrl);
        
        ws.onopen = function() {
          wsStatusDiv.innerHTML = `<p>‚úÖ WebSocket: Connected to ${wsUrl}</p>`;
          addLog('WebSocket connection successful');
          ws.close();
        };
        
        ws.onerror = function(error) {
          wsStatusDiv.innerHTML = `<p>‚ùå WebSocket: Connection failed</p>`;
          addLog('WebSocket connection failed: ' + error, 'error');
        };
        
        ws.onclose = function() {
          addLog('WebSocket connection closed');
        };
        
      } catch (error) {
        wsStatusDiv.innerHTML = `<p>‚ùå WebSocket: Error - ${error.message}</p>`;
        addLog('WebSocket test error: ' + error.message, 'error');
      }
    }
    
    // Override console methods to capture logs
    const originalLog = console.log;
    const originalError = console.error;
    const originalWarn = console.warn;
    
    console.log = function(...args) {
      addLog(args.join(' '), 'info');
      originalLog.apply(console, args);
    };
    
    console.error = function(...args) {
      addLog(args.join(' '), 'error');
      originalError.apply(console, args);
    };
    
    console.warn = function(...args) {
      addLog(args.join(' '), 'warn');
      originalWarn.apply(console, args);
    };
    
    // Auto-check status when page loads
    setTimeout(checkWidgetStatus, 2000);
    setTimeout(testWebSocket, 3000);
    
    // Listen for Chatwoot events
    window.addEventListener('chatwoot:ready', function() {
      addLog('Chatwoot ready event received');
      checkWidgetStatus();
    });
    
    window.addEventListener('chatwoot:error', function(e) {
      addLog('Chatwoot error event: ' + JSON.stringify(e.detail), 'error');
    });
  </script>

  <!-- Explicitly include Chatwoot Widget for demo hotel -->
  <ChatwootWidget domain="demo.daotomata.io" />
</Layout>
