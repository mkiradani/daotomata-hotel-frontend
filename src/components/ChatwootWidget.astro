---
// Multitenant Chatwoot Widget - Official SDK Integration using Directus
import { getHotelByDomain } from '../lib/directus.js';

interface Props {
  domain?: string;
}

const { domain } = Astro.props;

// Smart domain detection for multitenant setup
let targetDomain = domain;

// If no domain provided, detect from URL path and map to correct domain
if (!targetDomain) {
  const url = Astro.url;
  const pathSegments = url.pathname.split('/').filter(Boolean);

  if (pathSegments.length > 0) {
    const hotelSlug = pathSegments[0]; // demo, baberrih

    // Map hotel slugs to their actual domains in Directus
    const domainMapping = {
      maisondemo: 'maisondemo.com',
      demo: 'maisondemo.com',
      baberrih: 'baberrih.ma',
    };

    targetDomain = domainMapping[hotelSlug] || `${hotelSlug}.daotomata.io`;
  }
}

console.log('üîç ChatwootWidget - Detecting domain:', targetDomain, 'from URL:', Astro.url.pathname);

// Get Chatwoot configuration for this hotel domain from Directus
console.log('üîç ChatwootWidget - Querying Directus for domain:', targetDomain);

const hotel = await getHotelByDomain(targetDomain);

console.log('üîç ChatwootWidget - Directus query result:', {
  found: !!hotel,
  name: hotel?.name,
  hasToken: !!hotel?.chatwoot_website_token,
});

// Use chatwoot_website_token from Directus hotels table
const chatwootConfig = hotel?.chatwoot_website_token
  ? {
      website_token: hotel.chatwoot_website_token,
      account_id: null, // Not needed for widget initialization
    }
  : null;

if (!hotel) {
  console.error('‚ùå ChatwootWidget - Hotel not found for domain:', targetDomain);
} else if (hotel && chatwootConfig) {
  console.log(
    '‚úÖ ChatwootWidget loaded for:',
    hotel.name,
    'Token:',
    chatwootConfig.website_token?.substring(0, 8) + '...'
  );
} else {
  console.warn(
    '‚ö†Ô∏è ChatwootWidget - Hotel found but no chatwoot_website_token configured for:',
    hotel.name
  );
}
---

{chatwootConfig?.website_token && hotel && (
  <script is:inline define:vars={{
    websiteToken: chatwootConfig.website_token,
    hotelName: hotel.name
  }}>
    console.log('üîß CHATWOOT SCRIPT STARTING - Token:', websiteToken.substring(0, 8) + '...', 'Hotel:', hotelName);

    // Store configuration globally for debugging
    window.chatwootConfig = {
      websiteToken: websiteToken,
      hotelName: hotelName,
      baseUrl: "https://chat.daotomata.io"
    };

    console.log('üîß CHATWOOT CONFIG STORED:', window.chatwootConfig);

    // Chatwoot Settings - Official Configuration
    window.chatwootSettings = {
      hideMessageBubble: false,
      position: 'right',
      locale: 'es', // Spanish for hotels
      type: 'standard',
      darkMode: 'auto',
      launcherTitle: 'Chat con ' + hotelName
    };

    console.log('üîß CHATWOOT SETTINGS CONFIGURED:', window.chatwootSettings);

    // Official Chatwoot SDK Integration
    (function(d,t) {
      var BASE_URL = window.chatwootConfig.baseUrl;
      var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
      g.src=BASE_URL+"/packs/js/sdk.js";
      g.defer=true;
      g.async=true;

      console.log('üîß Loading Chatwoot SDK from:', g.src);

      g.onerror = function() {
        console.error('‚ùå Failed to load Chatwoot SDK from:', g.src);
      };

      s.parentNode.insertBefore(g,s);
      g.onload=function(){
        console.log('üîß Initializing Chatwoot with token:', websiteToken.substring(0, 8) + '...');
        console.log('üîß Base URL:', BASE_URL);
        console.log('üîß Hotel:', hotelName);

        try {
          window.chatwootSDK.run({
            websiteToken: websiteToken,
            baseUrl: BASE_URL,
            // Force ActionCable configuration for real-time messages
            enabledFeatures: ['emoji_picker', 'attachments', 'end_conversation'],
            // Ensure WebSocket connection for real-time updates
            websocketUrl: 'wss://chat.daotomata.io/cable',
            // Auto-open widget when messages arrive
            autoOpenOnNewMessage: true,
            // Show unread message count
            showUnreadCount: true
          });
          console.log('‚úÖ Chatwoot SDK initialized successfully');
        } catch (error) {
          console.error('‚ùå Error initializing Chatwoot SDK:', error);
        }

        // Store SDK reference globally for debugging
        window.chatwootSDKInstance = window.chatwootSDK;

        // Listen for Chatwoot ready event
        window.addEventListener('chatwoot:ready', function () {
          console.log('‚úÖ Chatwoot ready event fired for:', hotelName);
          console.log('‚úÖ Chatwoot widget should now be visible');

          // Check if widget is actually visible
          setTimeout(function() {
            const widget = document.querySelector('#chatwoot_live_chat_widget');
            if (widget) {
              console.log('‚úÖ Chatwoot widget element found in DOM');
              console.log('Widget styles:', window.getComputedStyle(widget));
            } else {
              console.warn('‚ö†Ô∏è Chatwoot widget element not found in DOM');
            }
          }, 1000);

          // Setup real-time UI refresh for incoming messages
          setupRealTimeUIRefresh();
        });

        // Listen for new message events
        window.addEventListener('chatwoot:on-message', function (e) {
          console.log('üì® New message event received:', e);
          // Force widget to open on new message
          setTimeout(function() {
            if (window.$chatwoot && window.$chatwoot.toggle) {
              window.$chatwoot.toggle('open');
              console.log('üîÑ Widget auto-opened on new message');
            }
          }, 100);
        });

        // Listen for unread count changes
        window.addEventListener('chatwoot:on-unread-message-count-changed', function (e) {
          console.log('üìä Unread count changed:', e);
          if (e.detail && e.detail.unreadCount > 0) {
            // Force widget to open when there are unread messages
            setTimeout(function() {
              if (window.$chatwoot && window.$chatwoot.toggle) {
                window.$chatwoot.toggle('open');
                console.log('üîÑ Widget auto-opened due to unread messages');
              }
            }, 100);
          }
        });

        // Listen for errors
        window.addEventListener('chatwoot:error', function (e) {
          console.error('‚ùå Chatwoot error:', e);
        });

        // Function to setup real-time UI refresh
        function setupRealTimeUIRefresh() {
          console.log('üîÑ Setting up real-time UI refresh...');

          // Intercept WebSocket messages for real-time updates
          const originalWebSocket = window.WebSocket;
          window.WebSocket = function(url, protocols) {
            const ws = new originalWebSocket(url, protocols);

            if (url.includes('/cable')) {
              console.log('üîó Intercepted Chatwoot WebSocket connection');

              ws.addEventListener('message', function(event) {
                try {
                  const data = JSON.parse(event.data);
                  if (data.message && data.message.event) {
                    console.log('üì® WebSocket message received:', data.message.event);

                    // Force widget refresh on message events
                    if (data.message.event === 'message.created' ||
                        data.message.event === 'message.updated' ||
                        data.message.event === 'conversation.updated') {

                      setTimeout(function() {
                        // Use correct Chatwoot API - $chatwoot is the main API
                        if (window.$chatwoot && window.$chatwoot.toggle) {
                          window.$chatwoot.toggle('open');
                          console.log('üîÑ Widget opened after:', data.message.event);
                        }
                      }, 200);
                    }
                  }
                } catch (e) {
                  // Ignore parsing errors for non-JSON messages
                }
              });
            }

            return ws;
          };

          // Also listen for postMessage events from the widget iframe
          window.addEventListener('message', function(event) {
            if (event.origin === 'https://chat.daotomata.io' && event.data) {
              if (event.data.type === 'chatwoot-widget' ||
                  event.data.event === 'message' ||
                  event.data.event === 'conversation-update') {

                console.log('üì® Widget iframe message:', event.data);

                // Force widget to open after iframe message
                setTimeout(function() {
                  if (window.$chatwoot && window.$chatwoot.toggle) {
                    window.$chatwoot.toggle('open');
                    console.log('üîÑ Widget opened after iframe message');
                  }
                }, 100);
              }
            }
          });
        }

      }
    })(document,"script");
  </script>
)}

{!chatwootConfig?.website_token && (
  <div style="position: fixed; bottom: 20px; right: 20px; background: #ff6b6b; color: white; padding: 10px; border-radius: 5px; font-size: 12px; z-index: 9999;">
    ‚ö†Ô∏è Chatwoot not configured for {domain}
  </div>
)}
