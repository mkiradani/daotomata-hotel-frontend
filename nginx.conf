# NGINX Configuration for Hotel Frontend with Subdomain Routing
# Optimized for SSR proxy with subdomain routing

server {
    listen 80;
    server_name ~^(?<subdomain>.+)\.daotomata\.io$;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip compression for better performance
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Proxy configuration for SSR server
    location / {
        proxy_pass http://localhost:4321;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Pass subdomain information to SSR server
        proxy_set_header X-Subdomain $subdomain;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

# Block access to main domain (daotomata.io)
server {
    listen 80;
    server_name daotomata.io;
    return 444; # Close connection without response
}

# Healthcheck server for localhost/internal requests
server {
    listen 80 default_server;
    server_name localhost 127.0.0.1 _;

    # Proxy healthcheck to SSR server
    location /health {
        access_log off;
        proxy_pass http://localhost:4321/health;
        proxy_set_header Host $host;
    }

    # Block everything else
    location / {
        return 444; # Close connection without response
    }
}
